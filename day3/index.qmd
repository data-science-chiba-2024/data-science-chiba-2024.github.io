---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第３回：プロジェクトの整理とデータの読み込み

2024-04-16

<https://data-science-chiba-2024.github.io/day3/>

<link rel="stylesheet" href="https://unpkg.com/keyboard-css@1.2.4/dist/css/main.min.css" />

## スクリプトについて

- 今までは直接Rにコマンドを出していたけど、毎回そうするのは効率が良くない。

- 作業を繰り返す場合や再現する場合は**スクリプト**(テキストファイル)が必要。

- Rスクリプトの拡張は`.R`か`.r`。

## スクリプトの作成と保存

- 作成
  - `File` ➡︎ `New File` ➡︎ `R Script`をクリック

- 保存
  - `File` ➡︎ `Save As...`をクリックかファイルのアイコンをクリック。

- スクリプトの名前はなるべくローマ字を使うように（あとあと公開する時のため）

## スクリプトからコードを使う

以下のコードをスクリプトに書いて、`script.R`としてデスクトップに保存しましょう（コードの詳細はまた後で学ぶ）。

```{r}
#| eval: false
library(tidyverse)

ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_hex()
```

## スクリプトからコードを使う

- カーソルが現在位置している行をコンソールに送る：<kbd class="kbc-button">Ctrl</kbd>（あるいは<kbd class="kbc-button">⌘</kbd>） + <kbd class="kbc-button">Enter</kbd>

- 今開いているスクリプトの行を**全て**コンソールに送る：<kbd class="kbc-button">Ctrl</kbd>（あるいは<kbd class="kbc-button">⌘</kbd>） + <kbd class="kbc-button">Shift</kbd>+ <kbd class="kbc-button">Enter</kbd>

## RStudioによる警告

スクリプトに間違いが入っている場合、RStudioはそれを教えてくれる（バツマークと赤い線）：

![](https://r4ds.hadley.nz/screenshots/rstudio-diagnostic.png){height="200"}

## スクリプトの書き方

- **読みやすさ**と**覚えやすさ**を優先しましょう。

- Rは大文字と小文字を区別するので、小文字に揃えた方が覚えやく、間違いが少ない（例えば、`Data`ではなく、`data`）。

- 変数名にはスペースが使えないので、`_`を使いましょう（例えば、`data_set_1`など）。

## スクリプトの書き方

- コメント（Rが無視する場所）を`#`で書く
  - 例えば、`# this is a comment`

- コメントは**自分用のメモ**
  - 未来の自分が、今の自分が何をやったのか、分かるように書く。
  - まだ慣れていないうちには特にたくさん書きましょう。

## ファイル名も整えましょう

::: {.columns}
::: {.column}

NG ❌

```
alternative model.R
code for exploratory analysis.r
finalreport.qmd
FinalReport.qmd
fig 1.png
Figure_02.png
model_first_try.R
run-first.r
temp.txt
```

:::
::: {.column}

OK ✅

```
01_load_data.R
02_exploratory_analysis.R
03_model_approach_1.R
04_model_approach_2.R
fig_01.png
fig_02.png
report_2022_03_20.qmd
report_2022_04_02.qmd
report_draft_notes.txt
```

:::
:::

## プロジェクトについて

- スクリプトとしてコードを保存をするのはいいけど、解析が進むと複数のスクリプトとデータを**整理する必要が生じる**

- RStudioの**「Project」機能**によって、スクリプトとデータ（など）の整理ができる

## 新しいプロジェクトを作る

- `File` ➡︎ `New Project` ➡︎ `New Directory` ➡︎ `New Project` をクリック
  - **プロジェクト名**と**場所**を入力（今回は`r4ds`にしましょう）
  - 分かりやすい場所がおすすめ（デスクトップにしましょう）

- 今回は"Create a git repository"をクリックしないけど、本当はgitも使った方がいい（またあとで説明します）

---

![](../images/new_project.png)

## 新しいプロジェクトを作る 

- プロジェクト名の入力が終わると、RStudioが再度立ち上がる

- ファイルパネル（右下）をよく見てください。今はRがどこに「います」か？

## 新しいプロジェクトを作る

- 右下の「ファイル」パネルを使って、`data`というフォルダーを作りましょう
  - あとで、このフォルダーに**これから解析するデータを置く**

![](../images/new_folder.png)

## .Rprojファイルについて

- 新しいプロジェクトには、`r4ds.Rproj`ファイルが入っている

- `.Rproj`ファイルの中身はは基本的に**触らない**
  - 中身はRStudioの設定（RStudioに任せましょう）
  - 再度プロジェクトを開く時に使う（ダブルクリック）

![](../images/rproj_icon.png)

## 作業ディレクトリについて

- 「作業ディレクトリ」（"working directory"）というのは、今Rが今「いる」場所のこと

- `getwd()`で確認できる：

```{r}
#| eval: false
getwd()
```

```{r}
#| echo: false
withr::with_dir("~/Desktop/r4ds", getwd())
```

## 作業ディレクトリについて

- 時々、他のスクリプトを見ると、`set.wd()`という関数を目にする
  - 例：`set.wd("/Users/joelnitta/analysis/")`
  - 後ろの部分は「パス」と言う（パソコンの中の住所のような物）

## 作業ディレクトリについて

- でも、多くの場合、**他の人のパソコンにあるパスは自分のパソコンに存在しない**
  - `.Rproj`を使えば、`set.wd()`を使う必要がない

- なので、**`set.wd()`は使わないようにしましょう。**

## プロジェクトにスクリプトを置きましょう

以下のコードを書いて、スクリプトを`diamonds.R`として`r4ds`プロジェクトに保存して、実行しましょう：

```{r}
#| eval: false
library(tidyverse)

ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_hex()
ggsave("diamonds.png")

write_csv(diamonds, "data/diamonds.csv")
```

このスクリプトは何をするのでしょうか？

## コードによる再現性

- `diamonds.R`は`diamonds.png`というグラフを作る。

. . .

- `diamonds.png`を消しましょう。

. . .

- 解析結果が消えてしまった！どうしよう！？

## コードによる再現性

- ご心配なく！
  - 再度`diamonds.R`を実行してください（<kbd class="kbc-button">Ctrl</kbd>（あるいは<kbd class="kbc-button">⌘</kbd>） + <kbd class="kbc-button">Shift</kbd>+ <kbd class="kbc-button">Enter</kbd>）

- 全く同じグラフが再度できた！つまり、**再現**しました。

. . .

- **コードとデータがあれば、解析結果はいつでも再現できる**

. . .

- 絶対に必要なのは、**コード**と**データ**。結果は「使い捨て」と考えて良い。

## ディスカッション

<br>

データ整理やプロジェクトの管理はどうしていますか？

## データの読み込み

- Moodleから`students.csv`をダウンロードして、`data/`に置きましょう。

- `.csv`は**c**omma **s**eparated **v**aluesの略です
  - エクセルで扱うようなデータ形式（エクセルでも開くことができる）
  - `.xslx`との違いは、`.csv`はそのままどのテキストエディターでも開ける（エクセルがいらない）

## データの読み込み

- `read_csv()`関数で読み込む

まずは、読み込んでから直接に中身を見てみましょう：

```{r}
#| echo: false
#| message: false
#| warning: false
suppressPackageStartupMessages(library(tidyverse))
```

```{r}
read_csv("data/students.csv")
```

## 読み込んだデータの保存

- でも、これだけではRの環境にそのデータが**入っていません**

- 変数（オブジェクト）として保存する必要がある：

```{r}
students <- read_csv("data/students.csv")
```

---

![](../images/students_data_in_env.png)

---

- このようにRに読み込んだデータを**データフレーム**（"dataframe"）、あるいは「tibble」と呼ぶ
  - ２次元データ。エクセルのデータシートみたいな物。

## 読み込んだデータの中身の確認（１）

- 変数として保存する時は中身が見えない（オブジェクトに渡された）

- 中身を見たい時は**変数名を直接コンソールに入力**すればいい

```{r}
students
```

## コンソールの使い方（使うとき）

- このような時に使う：データの中身を確認したい、ヘルプファイルを開きたい、など。

- つまり、**データ解析に必要ではない**（関係のない）コマンド。

## 読み込んだデータの中身の確認（２）

- もう一つのデータの確認の仕方がある：「Environment」パネルでそのオブジェクトをクリック

- すると、エクセルのようなレイアウトになる
  - エクセルと大きな違い：直接にデータをいじることができない！

. . .

- **エクセルはデータ入力に使う。Rはデータ解析に使う**

---

![](../images/students_data_view.png)

## データの種類（型）について

- `students`をコンソール（左下のパネル）でもう一回打ってみてください

- データの上に`<dbl>`とか`<chr>`とかと出ているけど、これは何でしょうか？

. . .

- A: データの**種類**です

## データの種類（型）について

- `dbl`: 数字（"double"の略。なぜ"double"でしょう・・）
- `chr`: 文字（"character"の略。この方がしっくり来るね）

このほかに、

- `lgl`：ロジカル（`TRUE`か`FALSE`か、そのどっちか）
- `int`：整数（"integer"の略）

がある

## ベクトルについて

- **ベクトル**（vector）とは、**同じ型を持つ一**連のデータの集まり（一次元の配列）

- ベクトルに含まれている一つ一つのデータを**要素**（element）という

- 例えば、`letters`
  - `"a"`が`letters`の１個目の要素

## ベクトルの作り方

- ベクトルを関数は`c()`
  - "combine"（「くっつける」）の略

```{r}
c(1, 2, 3)
```

## ベクトルの作り方

- 文字列（文字でできているベクトル）を作るときは、引用符をつけないといけない

```{r}
c("a", "b", "c")
```

## ベクトルの型の確認

- `typeof()`関数でベクトルの型を確認することができる

```{r}
typeof(letters)
```

## チャレンジ

- 以下のコードでベクトルを作ると、そのベクトルの型は何でしょうか？

```{r}
#| eval: false
c(1, 2, "c")
```

## ベクトル変換

- 先も言いましたが、あるベクトルの要素は全て同じ型を持たないといけない

- なので、入力が複数の型を含む場合、Rはそれを同じ型に合わせる

```{r}
x <- c(1, 2, "c")
typeof(x)
```

- 先のベクトルは**文字**に変換された

## ベクトル型とデータフレーム

- データフレームの列は、本当は**ベクトル**になっている

- なので、データフレームの列はそれぞれ、**型が決まっている**
  - これはエクセルと大きな違い

![](../images/dataframe.png)

## まとめ

- スクリプト（.Rファイル）に解析に必要な**コードを書く**

- スクリプトとデータがあれば、解析結果を**再現できる**

- **プロジェクト**を使うと、解析の管理が大幅にやりやすくなる

- **データフレーム**はベクトルからなっている

- **ベクトル**は一つの型しか持てない

## 宿題

**締め切り：2024-04-23 12:50**

- **クイズ**（moodle）
- 自分のデータを読み込む。  
二つのファイルmoodleにアップロード：
  - **データのファイル**（csv）
  - **読み込むスクリプト**

- もしcsvではないファイルを読み込みたければ、連絡してください
